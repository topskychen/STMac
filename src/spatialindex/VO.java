package spatialindex;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Serializable;
import java.lang.management.ManagementFactory;
import java.lang.management.ThreadMXBean;
import java.math.BigInteger;

import crypto.PMAC;


public class VO implements Serializable {

	private static final long serialVersionUID = 1L;

	private final static int T_START = 1; // time stamp begins from 1, not 0
	private final static int T_END = 8;
	int[] t = new int[100]; // timestamp array
	String[] x = { "01001011100011100110001000010110",
			"01001011100011100110001000010101",
			"01001011100011100110001000011110",
			"01001011100011100110001000010001" };
	
	
	
	public String getPrefix (String x, int d) {
		String prex = null;
		prex = x.substring(0, d);
		return prex;
	}
	
		
	/**
	 * The verify
	 * 
	 * @return
	 * @throws IOException
	 */
	public void singlepointVerify(String x, String q) throws IOException {
		int d = q.length();
		// prefix of x
		String pre = getPrefix(x,d);
		System.out.println("prefix of x is:" + pre);
		if (!pre.equals(q)) {
			System.out.println("user location x not in predicate q");
		} else {
			// suffix of x
			String su = x.substring(d);
			System.out.println("suffix of x is:" + su);
			ThreadMXBean bean = ManagementFactory.getThreadMXBean();

			// Get CPU time in nanoseconds (one billionth of a second)
			long start = bean.getCurrentThreadCpuTime();

			PMAC pmacapp = new PMAC();

			BigInteger pi_prex = pmacapp.generatePix(pre);
			BigInteger pi_su = pmacapp.generatePiSu(su, d);

			// authenticator: generate PMAC on (x[i],t[i])
			BigInteger singlepmacValue = pmacapp.singlepointPMAC(x, 0);
			System.out.println("PMAC generated by authenticator is: "
					+ singlepmacValue);

			// client: building VO
			System.out.println("¦°(pre) is " + pi_prex);
			BigInteger suffixEncry = (pmacapp.g).modPow(pi_su, pmacapp.p);
			System.out.println("g^¦°(su) mod p is " + suffixEncry);

			// verifier: compute PMAC out of VO, and compare
			BigInteger verifierComponent = suffixEncry.modPow(
					pi_prex.multiply(pmacapp.r), pmacapp.p);
			System.out.println("verifierComponent is " + verifierComponent);

			// compare singlepmacValue and verifierComponent
			Boolean isVerify = singlepmacValue.equals(verifierComponent);
			System.out.println("Comparation result is " + isVerify
					+ ", verified");
			System.out.println("user location x in predicate q");

			long end = bean.getCurrentThreadCpuTime();
			double totalCpuTime = (end - start) / 1000000.0;

			// long totalCpuTime = end - start ;
			System.out.println("Verification time used:\t" + totalCpuTime
					+ "ms");
		}
	}

	public void trajectoryVerify(String q, int start, int end)
			throws IOException {
		int d = q.length();
		for (int i = start; i < end - start; i++) {
			if (!x[i].substring(0, d).equals(q)) {
				System.out.println("user location " + x[i]
						+ " not in predicate q, verification failed");
				break;
			}
		}

		// assume all points in string x locate in window q, then they share
		// common prefix
		String[] su = new String[end - start];
		for (int i = start; i < end - start; i++) {
			su[i] = x[i].substring(d);
		}
		String pre = x[start].substring(0, d);
		PMAC pmacapp = new PMAC();

		// authenticator: generate aggregated PMAC
		BigInteger pi_prex = pmacapp.generatePix(pre);
		BigInteger aggregatedPMAC = pmacapp.trajectoryPMAC(x, start, end);
		System.out.println("Aggregated PMAC generated by authenticator is: "
				+ aggregatedPMAC);

		// client: building VO= pre(x) + ¡Æt[i] + g^¦°(su)mod p
		System.out.println("¦°(pre) is " + pi_prex);
		BigInteger aggre_suffixEncry = 	pmacapp.aggreSecPiSux(su, start, end, d);
		System.out.println("Aggregated g^¦°(su) mod p is " + aggre_suffixEncry);

		// verifier: compute PMAC out of VO, and compare
		BigInteger tmp = BigInteger.valueOf(1);
		for (int i = start; i < end - start; i++) {
			tmp = tmp.multiply(pi_prex).multiply(pmacapp.timeDegist(i));
		}

		BigInteger verifierComponent = aggre_suffixEncry.modPow(
				tmp.multiply(pmacapp.r), pmacapp.p);
		System.out.println("verifierComponent is " + verifierComponent);

		// compare singlepmacValue and verifierComponent
		Boolean isVerify = aggregatedPMAC.equals(verifierComponent);
		System.out.println("Comparation result is " + isVerify + ", verified");
		System.out.println("user location x in predicate q");
	}

	/**
	 * The main function
	 * 
	 * @param args
	 * @throws IOException
	 */

	public static void main(String[] args) throws IOException {

		String x = "01001011100011100110001000010110";
		System.out.print("the predicate q is: ");
		String q = new BufferedReader(new InputStreamReader(System.in))
				.readLine();

		VO vo = new VO();
		vo.singlepointVerify(x, q);
	}

}
